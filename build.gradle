plugins {
	id 'fabric-loom' version "${loom_version}"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

// version
def mcVersion = project.property('minecraft_version')
def fabricVer = project.property('fabric_version')
def yarnMappings = project.property('yarn_mappings')
def yarnSuffix = yarnMappings.startsWith("${mcVersion}+")
        ? yarnMappings.substring(("${mcVersion}+").length())
        : yarnMappings
def compatSuffix = "${fabricVer}+${yarnSuffix}"

version = "${project.mod_version}-${compatSuffix}"

base {
	archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
}

loom {
    splitEnvironmentSourceSets() // so client source set is created
}

def clientSS = sourceSets.named('client')
sourceSets {
    debug {
        java.srcDir 'src/debug/java'
        resources.srcDir 'src/debug/resources'
        // Inherit classpaths + compiled output from client
        compileClasspath += clientSS.get().compileClasspath + clientSS.get().output
        runtimeClasspath += clientSS.get().runtimeClasspath + clientSS.get().output
    }
}
loom {
    mods {
        "mcwebui" {
            sourceSet sourceSets.named('client').get()
        }
        "mcwebui-debug" {
            sourceSet sourceSets.named('debug').get()
        }
    }

    runs {
        client {
            client()
            source sourceSets.named('client').get()
            ideConfigGenerated true
        }
        debugClient {
            client()
            source sourceSets.named('debug').get()
            ideConfigGenerated true
        }
    }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    shadow(implementation fileTree('libs') {include '*.jar'})
	
}

tasks.named("processClientResources").configure {
    inputs.property("version", project.version)
    filesMatching("fabric.mod.json") { expand(version: project.version) }
}

tasks.named("processDebugResources").configure {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property("version", project.version)
    filesMatching("fabric.mod.json") { expand(version: project.version) }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": inputs.properties.version
    }
}

// java
tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
    exclude 'tytoo/minegui_debug/**'
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            groupId = project.maven_group
            artifactId = project.archives_base_name
            version = project.version
            def gitUrl = "https://github.com/trethore/MineGui"

            artifact(tasks.named("remapJar")) {
                builtBy(tasks.named("remapJar"))
            }
            artifact(tasks.named("sourcesJar")) {
                builtBy(tasks.named("sourcesJar"))
                classifier = 'sources'
            }

            pom {
                name = project.archives_base_name
                description = "MineGui: is a lightweight wrapper around imgui-java to make modern uis."
                url.set(gitUrl)
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }
                scm {
                    url = gitUrl
                    connection.set("scm:git:${gitUrl}.git")
                    developerConnection = "scm:git:ssh://git@github.com/trethore/McWebUI.git"
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/trethore/MineGui")
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: (findProperty("gpr.user") ?: "")
                password = System.getenv("GITHUB_TOKEN") ?: (findProperty("gpr.key") ?: "")
            }
        }
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set("dev")
    from sourceSets.client.output
}
remapJar {
    dependsOn(shadowJar)
    inputFile = tasks.shadowJar.archiveFile
}

configurations {
    decompiler
}

dependencies {
    decompiler 'org.benf:cfr:0.152'
}

tasks.register('generateProjectSources') {
    group = 'documentation'
    description = 'Decompiles JAR files from libs/ and places sources in project-sources/'
    doLast {
        def libsDir = file('libs')
        def outputDir = file('project-sources')
        def jarFiles = libsDir.listFiles({ it.name.endsWith('.jar') } as FileFilter)
        if (jarFiles == null || jarFiles.length == 0) {
            throw new GradleException("No JAR files found in libs/")
        }
        jarFiles.each { jar ->
            def jarName = jar.name.replaceAll('\\.jar$', '')
            def targetDir = file("${outputDir}/${jarName}")
            targetDir.mkdirs()
            javaexec {
                classpath = configurations.decompiler
                mainClass = 'org.benf.cfr.reader.Main'
                args jar.absolutePath, '--outputdir', targetDir.absolutePath
            }
        }
    }
}

tasks.register('cleanProjectSources', Delete) {
    group = 'documentation'
    description = 'Deletes the project-sources folder'
    delete 'project-sources'
}
