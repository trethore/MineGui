MineGui Styling System Plan
---------------------------

Objectives and Constraints
- Respect Dear ImGui’s immediate-mode philosophy; every style change must be scoped and reversible within a single frame.
- Offer layered styling so global defaults, per-view themes, and inline group overrides can co-exist without surprising mutation.
- Keep MineGui’s API surface small and explicit while providing Java-friendly helpers that hide repetitive ImGui calls.
- Validate inputs just enough to guard obvious misuse (e.g., negative sizes when ImGui expects non-negative) and otherwise defer to ImGui’s native validation.
- Avoid implicit allocations in the render loop; cache descriptors and reuse buffers where possible.
- Defer persistence and user-facing theming to configuration layers so the core stays lightweight.

Conceptual Building Blocks
- MGStyleDescriptor: immutable snapshot of ImGuiStyle fields plus an optional color palette. Supports full capture from ImGui or selective overrides.
- MGStyleDelta: lightweight override container where unset fields fall back to a parent descriptor. Enables themed variations without duplication. Can optionally carry font selection overrides (font identifier, size, hinting flags) to be resolved through the font loader.
- MGColorPalette: maps ImGuiCol entries to integer colors with optional inheritance; keeps palette logic separate from layout metrics.
- MGStyleScope: AutoCloseable helper that pushes deltas onto ImGui’s style stack for the current frame and automatically restores prior state.
- MGStyleContext: runtime resolver that merges descriptors, deltas, and palettes into the effective ImGuiStyle before render.
- MGFontLibrary: utility responsible for loading and caching TTF resources (including project fonts and configured custom paths) so style deltas can reference fonts by key rather than raw byte data.

Style Resolution Lifecycle
- Global bootstrap: UIManager installs a base MGStyleDescriptor during MineGui startup, seeded from ImGui.getStyle().
- Per-view attach: MGView exposes optional getBaseStyle() or onConfigureStyle(MGStyleBuilder) hooks returning an MGStyleDelta.
- Group-level overrides: utility helpers (e.g., MGStyleScope.of(delta)) allow temporary overrides inside renderView() blocks.
- Final merge order: global descriptor → registered theme tokens (e.g., “dark”, “experimental”) → view delta → inline scope delta.
- Application: resolved style updates ImGui.getStyle() once per frame using cached array/buffer writes to minimize JNI calls; colors use ImGui.pushStyleColor when partial overrides exist.

Authoring API Direction
- MGStyleBuilder: fluent Java builder used during initialization to craft descriptors and deltas; exposes strongly typed setters mirroring ImGuiStyle fields. Builder includes font reference setters that resolve through MGFontLibrary.
- NamedStyleRegistry: central registry keyed by Identifier for reusable themes; supports hot reload via config or resource packs later.
- View integration: MGView gains optional setStyleKey(Identifier) convenience plus immediate overrides via try (var scope = styleManager.push(delta)) {} blocks.
- Batch helpers: StyleStack provides pushWindowPadding, pushRounding, etc., delegating to ImGui.pushStyleVar but tracking ownership for safe pop().

Color Strategy
- Colors managed via MGColorPalette; palette merges mirror style merges, allowing partial overrides (e.g., only button colors).
- Ensure palettes can compute either ImGui packed int or float[4] to feed imgui-java with minimal overhead.
- Provide presets (default, minecraft-inspired) bundled under assets/minegui/styles/ for future resource-pack integration.

Font Strategy
- MGFontLibrary loads TTF files from assets/minegui/fonts/ and configurable external paths, caching fonts in ImGuiIO.
- Style descriptors reference fonts by Identifier; deltas can request font switches or size adjustments per scope.
- Provide builder hooks to fall back to default font when requested font is missing.
- Log font loading failures at WARN level (no in-game toast) so developers can inspect logs without UI disruption.

Persistence and Config Hooks
- GlobalConfig gains theme selection and runtime tweak sliders that emit MGStyleDelta instances stored per profile.
- ViewSaveManager persists a view’s chosen style key or inline tweaks when shouldSave is true.
- Expose serialization format (likely JSON in config directory) representing descriptors and palettes for user customization.
- Add debug-only Fabric commands (behind FabricLoader.isDevelopmentEnvironment()) such as `/minegui reload config` and `/minegui reload style` to refresh configuration or style assets without full client restart.

Implementation Phases
1. Foundations: introduce MGStyleDescriptor, MGStyleDelta, MGColorPalette with conversion to/from ImGuiStyle; add unit-esque tests via JVM harness.
2. Runtime hooks: extend UIManager to install global descriptor and offer StyleManager singleton handling scope stacks.
3. Font pipeline: introduce MGFontLibrary and wire into descriptors/deltas; document font asset expectations.
4. View API: add optional style hooks on MGView, plus scoped helpers for groups (`StyleScope.with(delta, () -> { ... })`).
5. Developer ergonomics: provide preset registry entries, builders, debug overlay to inspect active style layers, and the `/minegui reload *` commands.
6. Persistence: wire GlobalConfig and ViewSaveManager to serialize selected styles; document commands for swapping themes at runtime. `/minegui reload style` performs a full rebuild of descriptors, palettes, and cached ImGui state to guarantee fresh results.
7. Future work: consider animation-friendly transitions (lerping between descriptors) and cross-mod interop via public API.

Public API Surface (Stability Commitments)
- Public classes exposed to mod authors: MGStyleDescriptor, MGStyleDelta, MGColorPalette, MGStyleBuilder, MGStyleScope, StyleManager (singleton access), and MGFontLibrary’s high-level font registration methods.
- MGStyleContext, NamedStyleRegistry internals, and resolver implementations stay package-private to allow future refactors without breaking consumers.
- MGView gains stable opt-in hooks (e.g., `protected void configureStyle(MGStyleBuilder builder)`) and `setStyleKey`; these must stay binary compatible.
- Debug commands and config integration remain internal APIs guarded behind development checks to avoid long-term support obligations.
- Extensibility hinges on explicit registration points: mod authors can register descriptors, palettes, font packs, and scoped overrides via StyleManager without touching internal classes, keeping the external surface lean but powerful.
